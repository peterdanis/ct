version: '3.8'
services:
  dynamodb-local:
    container_name: dynamodb-local
    image: amazon/dynamodb-local:2.4.0
    command: '-jar DynamoDBLocal.jar -sharedDb -inMemory'
    ports:
      - 8000:8000
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:8000']
      start_period: 15s
      start_interval: 3s
      interval: 60s
      timeout: 10s
      retries: 5

  dynamodb-admin:
    container_name: dynamodb-admin
    image: aaronshaf/dynamodb-admin:4.6.1
    environment:
      DYNAMO_ENDPOINT: 'http://dynamodb-local:8000'
      AWS_REGION: local
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    ports:
      - 8001:8001
    depends_on:
      dynamodb-local:
        condition: service_healthy

  dynamodb-init-products:
    container_name: dynamodb-init-products
    image: amazon/aws-cli:2.15.39
    environment:
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    command: >-
      dynamodb create-table
        --table-name products
        --attribute-definitions
            AttributeName=PK,AttributeType=S
            AttributeName=SK,AttributeType=S
        --key-schema
            AttributeName=PK,KeyType=HASH
            AttributeName=SK,KeyType=RANGE
        --billing-mode PAY_PER_REQUEST
        --endpoint-url http://dynamodb-local:8000 --region local
    depends_on:
      dynamodb-local:
        condition: service_healthy

  dynamodb-init-ratings:
    container_name: dynamodb-init-ratings
    image: amazon/aws-cli:2.15.39
    environment:
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    command: >-
      dynamodb create-table
        --table-name ratings
        --attribute-definitions
            AttributeName=productId,AttributeType=S
        --key-schema
            AttributeName=productId,KeyType=HASH
        --billing-mode PAY_PER_REQUEST
        --endpoint-url http://dynamodb-local:8000 --region local
    depends_on:
      dynamodb-local:
        condition: service_healthy
  kafka:
    container_name: kafka
    image: bitnami/kafka:3.6.2
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9094,LOCAL://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,LOCAL:PLAINTEXT
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,LOCAL://localhost:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=Y3Qta2Fma2EtY2x1c3Rlcg==
    ports:
      - 9093:9093
    healthcheck:
      test: /opt/bitnami/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
      start_period: 15s
      start_interval: 3s
      interval: 60s
      timeout: 10s
      retries: 5

  kafka-init:
    container_name: kafka-init
    image: bitnami/kafka:3.6.2
    command: >-
      bash -c "
      kafka-topics.sh
      --create
      --topic ct.review.modified
      --partitions 10
      --replication-factor 1
      --bootstrap-server kafka:9092
      || echo ok
      &&
      kafka-topics.sh
      --create
      --topic ct.product.rating.calculated
      --partitions 10
      --replication-factor 1
      --bootstrap-server kafka:9092
      || echo ok
      "
    depends_on:
      kafka:
        condition: service_healthy

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_NAME: Y3Qta2Fma2EtY2x1c3Rlcg==
    depends_on:
      kafka:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:7.2.4-alpine3.19
    ports:
      - '6379:6379'
    command:
      [
        'redis-server',
        '--appendonly',
        'no',
        '--maxmemory',
        '500mb',
        '--maxmemory-policy',
        'allkeys-lru',
      ]

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: redis:6379
    ports:
      - 8081:8081

  product-service:
    deploy:
      replicas: 2
    build:
      context: .
      dockerfile: apps/product-service/Dockerfile
    ports:
      - 3000-3001:3000
    environment:
      DYNAMODB_ENDPOINT: http://dynamodb-local:8000
      DYNAMODB_TABLE: products
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_REVIEW_MODIFIED_TOPIC: ct.review.modified
      KAFKA_RATING_CALCULATED_TOPIC: ct.product.rating.calculated
      KAFKA_GROUP_ID: product-service-docker
      KAFKA_PARTITIONS_CONSUMED_CONCURRENTLY: 10
      KAFKA_START_FROM_BEGINNING: false
      PORT: 3000
      NODE_ENV: production
      AWS_REGION: local
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
      REDIS_TTL: 10
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      dynamodb-local:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  review-processing-service:
    deploy:
      replicas: 2
    build:
      context: .
      dockerfile: apps/review-processing-service/Dockerfile
    environment:
      DYNAMODB_ENDPOINT: http://dynamodb-local:8000
      DYNAMODB_TABLE: ratings
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_REVIEW_MODIFIED_TOPIC: ct.review.modified
      KAFKA_RATING_CALCULATED_TOPIC: ct.product.rating.calculated
      KAFKA_GROUP_ID: review-processing-service-docker
      KAFKA_PARTITIONS_CONSUMED_CONCURRENTLY: 10
      KAFKA_START_FROM_BEGINNING: false
      PORT: 3000
      NODE_ENV: production
      AWS_REGION: local
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    depends_on:
      dynamodb-local:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
